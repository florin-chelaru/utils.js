/**
 * Created by Florin Chelaru ( florin [dot] chelaru [at] gmail [dot] com )
 * Date: 10/7/2015
 * Time: 2:38 PM
 */

QUnit.test('Promise', function(assert) {
  var done = assert.async();
  assert.ok(Promise);

  var finished = false;

  var act = null;
  var exp = 'something';
  var p = new Promise(function(resolve, reject) {
    setTimeout(function() {
      resolve('something');
    }, 100);
  }).then(function(value) {
      if (!finished) {
        act = value;
        assert.equal(act, exp);
        finished = true;
        done();
      }
    });


  setTimeout(function() {
    assert.notOk(finished);
    assert.notOk(act);
  }, 50);

  setTimeout(function() {
    if (!finished) {
      assert.ok(finished, 'Timed out');
      if (!finished) {
        done();
        finished = true;
      }
    }
  }, 200);
});

QUnit.test('u.Exception', function(assert) {
  assert.ok(u.Exception);

  var inner = Error('another message');
  var e = new u.Exception('my message', inner);

  assert.equal(e.message, 'my message');
  assert.equal(e.name, 'Exception');
  assert.deepEqual(e.innerException, inner);
  assert.ok(e instanceof Error);
});

QUnit.test('u.AbstractMethodException', function(assert) {
  assert.ok(u.AbstractMethodException);

  var inner = Error('another message');
  var e = new u.AbstractMethodException('my message', inner);
  assert.equal(e.message, 'my message');
  assert.equal(e.name, 'AbstractMethodException');
  assert.deepEqual(e.innerException, inner);
  assert.ok(e instanceof Error);
});

QUnit.test('u.UnimplementedException', function(assert) {
  assert.ok(u.UnimplementedException);

  var inner = Error('another message');
  var e = new u.UnimplementedException('my message', inner);
  assert.equal(e.message, 'my message');
  assert.equal(e.name, 'UnimplementedException');
  assert.deepEqual(e.innerException, inner);
  assert.ok(e instanceof Error);
});

QUnit.test('u.TimeSpan', function(assert) {
  assert.ok(u.TimeSpan);

  var t = new u.TimeSpan(65432);
  assert.equal(t.days(), 0);
  assert.equal(t.hours(), 0);
  assert.equal(t.minutes(), 1);
  assert.equal(t.seconds(), 5);
  assert.equal(t.milliseconds(), 432);

  t = new u.TimeSpan(
    3 * 24 * 60 * 60 * 1000 +
    4 * 60 * 60 * 1000 +
    17 * 60 * 1000 +
    43 * 1000 +
    158);

  assert.equal(t.days(), 3);
  assert.equal(t.hours(), 4);
  assert.equal(t.minutes(), 17);
  assert.equal(t.seconds(), 43);
  assert.equal(t.milliseconds(), 158);

  assert.equal(u.math.floorPrecision(t.totalDays(), 2), 3.17);
  assert.equal(u.math.floorPrecision(t.totalHours(), 2), 3 * 24 + 4 + 0.29);
  assert.equal(u.math.floorPrecision(t.totalMinutes(), 2), 3 * 24 * 60 + 4 * 60 + 17 + 0.71);
  assert.equal(u.math.floorPrecision(t.totalSeconds(), 2), 3 * 24 * 60 * 60 + 4 * 60 * 60 + 17 * 60 + 43 + 0.15);
  assert.equal(t.totalMilliseconds(), 3 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000 + 17 * 60 * 1000 + 43 * 1000 + 158);
});

QUnit.test('u.Geolocation', function(assert) {
  assert.ok(u.Geolocation);

  var g1 = new u.Geolocation(10, 20);
  var g2 = new u.Geolocation(10, 20);

  assert.ok(g1.equals(g2));
  assert.ok(g1.equals({lat: 10, lng: 20}));

  g1 = new u.Geolocation(42.336475, -71.148668);
  g2 = new u.Geolocation(42.339139, -71.136610);

  assert.ok(Math.abs(g1.distanceTo(g2) - 1034.4163801246343) < 0.001);
});

QUnit.test('u.Event', function(assert) {
  var done = assert.async();
  assert.ok(u.Event);
  assert.ok(u.EventListener);

  var finished = false;
  var exp = {'a': 'b', 'x': 7, 9: 'z'};
  var t = false;
  u.Event.TIMEOUT = function(callback, delay) {
    t = true;
    return setTimeout(callback, delay);
  };

  var e = new u.Event();
  e.addListener(function(obj) {
    assert.ok(t);
    assert.equal(obj, exp);
    finished = true;
    done();
  });

  e.fire(exp);

  setTimeout(function() {
    assert.ok(finished);
    if (!finished) { done(); }
  }, 100);
});

QUnit.test('u.QuadTree', function(assert) {
  assert.ok(u.QuadTree);

  var x = -4, y = -4, w = 24, h = 24, ratio = 0.005, maxItems = 10;

  var qt = new u.QuadTree(x, y, w, h, ratio, maxItems);
  var normal = [-0.568,0.077,-0.053,1.08,5.742,0.063,0.707,5.409,4.61,0.595,-0.199,0.548,0.293,11.302,10.895,10.59,14.101,-0.057,4.657,6.35,4.37,6.151,4.094,-0.631,8.66,0.87,0.117,0.27,2.96,2.238,0.04,2.637,7.195,9.515,13.051,0.451,-0.078,-0.06,1.031,0.606,6.807,1.518,10.851,-0.055,0.364,-0.248,-0.179,-0.194,17.22,2.177,8.871,3.616,7.086,-0.173,11.11,1.855,1.809,0.62,6.15,5.928,-0.015,0.232,0.373,0.338,14.632,9.943,2.21,1.113,0.957,0.121,-0.37,-0.166,1.535,0.7,7.89,-0.115,-0.608,3.696,0.182,6.082,2.969,0.435,-0.317,0.297,0.269,-0.454,-0.137,3.263,0.326,0.071,0.997,0.06,9.643,0.202,0.911,4.218,1.568,-0.913,1.901,-1.089,-0.823,4.459,9.855,10.573,3.936,4.702,0.134,8.093,0.168,0.436,0.587,-0.509,2.247,0.089,-0.223,-0.023,-0.27,1.811,0.127,4.308,1.242,2.115,7.905,0.696,4.064,5.889,-0.342,1.701,-0.311,1.338,0.058,0.018,-0.16,1.167,-0.112,0.194,10.315,10.486,8.525,0.586,0.137,0.283,0.748,-0.373,0.198,0.179,-0.44,-0.15,-0.377,-0.224,0.386,-0.227,-0.245,-0.063,-0.411,-0.533,2.582,0.136,1.172,-0.218,7.832,0.139,3.521,-0.399,-0.009,1.865,3.322,1.334,-0.046,1.227,0.923,0.022,0.548,1.179,0.742,7.985,1.333,0.769,-0.42,-0.273,1.037,-0.242,0.279,9.663,11.083,9.268,8.106,1.589,0.507,3.617,4.178,-0.105,-0.35,0.434,-0.374,0.168,-0.412,-0.327,-0.094,-0.889,-0.317,2.421,6.861,0.489,-0.199,-0.342,-0.387,-0.246,12.287,-0.371,0.274,-0.032,0.762,0.101,0.5,-0.513,-0.187,-0.359,-0.597,0.285,-0.25,19.148,-0.437,5.444,0.163,-0.832,0.52,0.433,10.082,7.193,-0.552,-0.915,2.922,2.1,6.97,5.758,8.488,6.815,5.579,3.135,0.601,6.422,1.277,2.872,1.513,4.261,-0.293,7.48,-0.478,3.315,0.129,4.243,1.124,0.245,0.163,4.867,2.585,1.182,4.281,10.627,-0.019,1.326,5.119,1.528,-1.045,-0.914,2.198,3.773,8.114,0.59,12.09,2.671,7.181,5.524,5.206,-0.335,0.268,8.955,-0.488,-0.422,1.129,-0.284,2.814,4.478,6.024,4.864,7.162,6.701,12.982,7.963,9.43,9.156,10.958,1.71,2.374,1.986,1.212,-0.391,-0.528,0.023,-0.471,-0.287,0.906,-0.878,-0.311,0.374,1.834,-0.114,8.683,8.286,3.382,17.747,2.693,-0.642,5.543,4.833,0.33,5.137,-0.065,0.4,8.061,9.138,0.514,0.453,-0.66,0.244,-0.566,7.353,3.927,0.982,-0.546,-0.321,-0.271,1.003,0.211,-0.899,1.294,2.602,15.644,-0.321,-0.281,10.075,2.894,2.431,0.154,1.633,-0.065,0.376,-0.431,0.427,-0.575,0.268,-0.389,-0.48,-0.299,-0.51,5.125,-0.38,3.992,5.14,-0.351,0.513,0.902,7.104,8.366,1.277,-0.238,0.213,-0.111,2.489,-0.439,2.892,1.038,-0.889,0.834,2.175,4.039,4.646,-0.002,-0.475,-0.414,-0.648,-0.075,-0.269,-0.355,0.723,-0.786,-0.992,3.855,-0.042,10.063,0.078,2.261,5.326,7.007,-0.907,-1.187,0.246,0.864,-0.351,-0.156,0.441,-1.222,-0.968,-1.14,1.958,2.628,0.55,1.524,0.414,-0.579,7.229,-0.681,-0.804,8.353,7.862,-0.98,2.268,7.736,4.816,6.867,-0.843,3.223,0.012,0.894,-0.698,0.316,-0.509,-0.078,-0.143,9.083,-0.807,-0.696,-0.538,11.59,9.781,10.362,4.943,-0.09,4.122,3.866,9.81,10.466,-0.056,-0.549,0.15,0.821,-0.217,10.237,7.977,-0.271,-0.663,10.972,5.647,8.142,17.492,7.31,5.28,5.727,10.613,2.702,5.033,5.446,2.535,4.95,5.45,-0.755,-0.16,-0.165,-0.583,2.213,-0.797,5.135,0.271,-0.133,5.427,5.649,0.974,-0.248,-0.34,0.313,0.4,-0.615,0.586,1.913,5.459,-0.333,0.867,4.508,2.106,3.036,11.494,0.472,-0.552,3.787,1.28,-0.398,0.935,0.29,0.883,0.285,2.782,0.199,1.187,8.82,0.038,1.904,2.935,0.203,0.436,-0.801,-0.454,0.284,0.837,0.845,-0.051,-0.189,-1.502,0.793,8.504,2.704,1.439,3.857,-0.259,0.107,-0.423,-0.124,-0.053,0.329,0.281,0.603,-0.122,10.315,0.881,0.198,0.453,2.777,4.646,4.51,4.662,0.544,-1.236,-0.061,1.262,5.6,3.602,-0.174,0.277,0.183,0.792,-0.577,-0.737,6.504,-0.307,-0.601,9.573,0.127,-1.187,6.211,0.305,-0.03,0.687,0.217,10.049,-0.693,9.444,5.749,-0.645,4.596,3.12,-0.64,-0.586,6.884,0.097,-0.973,-0.511,-0.346,0.02,-0.054,-0.449,0.137,-0.235,-0.285,1.579,2.503,3.416,5.883,-0.072,-0.181,-0.248,1.435,1.315,-0.755,0.693,5.021,0.468,-0.384,5.416,5.466,0.069,-0.191,2.727,3.631,5.69,0.571,0.403,8.953,8.491,9.256,9.516,-1.01,5.262,10.146,10.004,9.783,5.197,-0.508,1.511,9.132,-0.139,-0.211,0.216,-0.547,-0.006,-0.424,0.822,-0.17,5.013,-0.248,7.912,9.001,7.33,1.006,7.096,2.626,2.384,0.541,0.415,7.456,4.51,-0.223,7.07,0.336,-0.36,-0.213,-0.46,-0.245,0.305,6.537,6.738,7.312,6.908,2.383,2.981,5.935,0.934,-0.294,7.995,5.007,1.351,-0.213,0.239,2.869,3.366,5.652,1.071,18.166,3.977,-0.294,1.319,1.376,0.182,-0.115,7.02,5.001,0.377,-0.751,1.502,0.452,0.553,0.834,1.726,0.784,1.509,-0.407,7.153,6.661,0.062,-0.409,7.516,0.415,0.387,6.059,4.174,0.844,5.701,2.919,-0.118,1.004,-0.118,0.771,-0.088,0.547,0.597,2.803,-0.14,11.738,1.987,2.607,-0.996,-0.655,-0.239,-0.118,-0.661,-1.013,-0.725,1.403,1.058,4.579,0.036,18.333,12.143,-0.157,-0.623,-0.604,7.726,-0.62,-0.439,4.399,3.449,-0.309,1.02,12.09,-0.071,0.175,0.589,0.179,1.085,1.069,0.109,-0.421,-0.082,9.584,8.405,0.834,1.1,6.695,-0.371,1.125,-0.085,-0.495,1.535,4.359,0.286,1.871,7.233,2.505,-0.014,-0.578,-0.012,0.101,7.333,0.099,0.363,-0.577,5.91,0.207,3.606,5.362,0.501,0.073,0.129,0.434,0.568,-0.177,-0.525,0.412,0.511,0.045,-0.359,-0.598,-0.188,-0.093,7.131,3.803,2.17,0.034,2.41,-0.514,6.436,8.749,8.233,-0.718,1.863,0.844,1.156,0.951,2.379,15.054,5.225,1.346,8.823,2.36,0.319,4.761,5.33,3.087,1.962,2.555,1.643,0.244,0.528,1.652,-0.35,8.226,5.936,0.509,0.947,3.222,4.216,-0.081,0.825,4.037,-0.298,0.689,3.917,2.034,9.287,12.992,12.38,1.051,2.1,0.119,1.091,0.391,0.62,0.287,1.187,-0.058,0.057,8.744,1.804,0.222,3.819,-0.314,0.589,1.093,1.712,0.185,1.23,0.767,-0.094,1.036,0.903,0.477,0.235,2.907,5.838,1.366,3.135,1.924,2.011,1.643,1.79,1.403,10.624,0.587,0.466,-0.013,12.628,8.277,3.012,4.467,0.61,-0.339,0.901,0.95,2.944,-0.624,-0.354,0.2,5.656,0,2.469,-0.272,1.57,4.384,6.593,2.643,2.062,-0.256,-0.367,-0.2,4.504,1.582,0.723,5.456,1.656,1.501,1.421,1.996,5.843,-0.565,1.521,6.658,0.093,15.89,19.165,0.905,2.788,1.612,1.688,4.718,-0.259,2.578,0.633,2.374,4.097,0.896,-0.307,3.339,9.755,-0.792,-0.435,-0.472,-0.366,7.62,-0.824,-0.535,0.271,9.842,1.142,7.966,1.56,1.382,1.121,1.647,4.267,0.353,2.699,-0.258,4.464,-0.537,4.337,4.8,3.563,-0.106,0.685,1.278,-0.107,1.035,-0.11,0.628,1.187,0.933,-0.632,7.342,-0.824,-0.383,0.113,1.462,1.447,0.991,1.425,2.555,-0.482,0.638,6.742,5.131,5.348,-0.448,2.218,0.088,7.549,-0.557,2.45,2.005,1.814,5.41,0.291,2.761,0.475,10.389,1.863,0.581,0.678,3.04,2.633,8.456,-0.194,5.392,4.616,0.804,1.048,0.263,1.7,5.957,-0.169,10.259,0.744,10.821,1.608,2.817,0.88,1.251,-0.555,-0.302,1.921,2.621,5.408,8.654,5.518,2.318,1.409,6.65,1.564,3.057,2.752,3.278,6.054,0.298,6.171,0.095,0.515,0.501,1.404,8.995,2.007,2.304,0.023,5.27,3.142,-0.112,-0.417,-0.695,-0.07,0.09,3.076,7.295,0.364,-0.157,-0.125,-0.372,0.236,2.44,2.525,-0.2,4.668,0.789,-0.797,10.55,0.574,2.107,4.139,0.653,-0.538,3.57,1.806,3.218,6.67,-0.148,0.362,0.461,2.075,-0.315,0.377,2.503,0.794,4.729,1.607,0.236,8.042,1.306,0.303,0.85,2.516,0.953,0.165,-0.781,-0.026,0.849,0.738,-0.864,1.083,9.056,0.492,1.566,-1.281,2.442,0.515,0.43,1.039,-0.335,-0.969,2.138,-0.326,0.948,5.445,6.053,2.093,0.761,5.193,9.158,-0.415,0.941,-0.11,-0.278,-0.236,-0.385,2.993,3.993,0.207,1.39,3.381,-0.218,1.011,2.098,1.541,8.743,2.381,-0.168,1.233,-0.105,9.36,12.711,-0.678,-0.454,-0.39,1.258,5.567,1.719,2.754,1.891,3.184,1.101,17.653,-0.07,-0.745,-0.482,0.109,5.459,0.777,-0.346,-0.608,-0.38,8.423,0.324,0.509,-0.58,0.836,6.596,-0.615,-0.55,-0.264,0.908,-0.695,1.46,1.869,2.596,4.292,1.572,6.227,0.194,2.622,4.586,6.084,-0.298,-0.37,-0.119,-0.349,7.542,-0.21,-0.306,3.413,6.714,4.583,2.721,7.764,-0.116,-0.527,3.149,-0.455,-0.001,0.479,4.5,3.754,0.571,-0.501,4.114,5.058,0.266,0.339,0.126,11.614,-0.005,4.831,0.278,-1.026,1.753,2.975,-0.643,-0.3,0.135,-0.099,7.44,-0.776,0.136,0.171,-0.142,0.284,-0.558,-0.018,1.717,3.294,-0.163,-0.482,-0.049,6.825,5.909,-1.263,-0.27,0.811,1.683,-0.199,1.427,-0.382,12.431,11.663,3.181,-0.412,8.723,0.776,5.423,3.668,-0.655,0.518,5.209,-0.669,4.453,8.262,6.676,0.888,-0.366,4.689,-0.479,0.092,9.723,9.361,6.476,0.852,-0.402,-0.081,0.052,-0.399,-0.162,-0.996,-0.548,-0.145,-0.67,3.683,-0.357,-0.436,-0.448,-0.412,-0.224,-0.359,-0.327,-0.482,8.032,-0.743,-1.052,3.406,0.193,7.759,8.237,0.118,2.673,-0.225,-0.541,0.087,-0.431,0.553,3.801,6.801,2.803,2.513,1.316,-0.699,0.054,-0.344,-0.611,-0.774,3.587,9.161,2.559,3.26,-0.44,-1.201,-0.764,-0.959,-0.786,-0.059,-1.09,1.02,-0.779,0.29,1.723,2.222,2.385,1.499,3.737,0.691,0.586,0.272,5.687,-0.217,1.89,1.682,-0.635,-0.339,4.317,4.8,-0.367,0.855,-0.325,-0.289,-0.523,1.417,-0.636,-0.89,-0.786,4.885,9.112,8.862,5.092,1.538,8.684,8.666,-0.091,-0.36,-0.477,-0.198,-0.125,-0.163,3.054,1.023,3.658,-0.485,-1.344,-1.074,5.82,0.789,-0.305,-0.593,3.593,5.584,7.791,6.969,7.099,9.264,8.801,7.663,8.487,-0.541,-0.438,-0.943,-0.187,-0.556,3.43,1.821,-0.2,-0.392,-0.673,-0.719,-1.609,-0.812,-0.439,-0.683,-0.145,4.039,-0.302,5.415,-0.58,-0.078,0.031,11.181,1.768,-0.089,-0.837,0.433,-0.547,-0.134,-0.507,3.746,8.072,9.397,-0.011,-0.337,-0.456,-0.69,4.15,-1.471,3.626,0.822,4.181,7.79,2.625,-0.113,1.2,0.819,1.667,-0.221,4.333,9.486,-0.116,-0.204,-0.453,0.639,-0.658,0.261,0.162,0.812,-0.58,2.428,-0.3,3.193,2.532,-0.802,-0.111,3.633,3.431,4.563,0.542,2.493,3.793,-0.178,-0.256,3.871,5.943,5.666,-0.449,0.701,-0.281,0.065,11.821,10.118,6.213,-0.146,-0.633,5.754,-0.388,0.793,1.106,-0.125,0.353,-0.908,0.611,-0.233,-0.119,0.294,-0.398,-0.28,-0.928,-0.206,-0.781,0.252,0.566,0.094,0.875,6.058,2.991,0.595,5.543,1.373,8.715,0.635,11.603,7.43,12.452,1.989,3.047,0.189,0.048,0.74,0.281,-0.324,0.238,-0.225,-0.022,-0.083,0.366,1.306,-0.623,5.307,-0.126,7.536,-0.403,1.586,8.866,8.253,9.306,4.245,0.588,0.981,2.157,0.523,0.009,2.381,-0.718,-1.344,0.699,0.532,0.162,-0.307,2.763,-0.338,0.445,4.035,10.672,-0.041,0.199,0.382,-0.327,2.075,3.26,4.386,3.12,4.731,2.081,8.393,11.388,6.819,14.027,13.938,-0.672,1.73,-0.392,0.007,2.312,0.129,2.95,-0.326,-0.614,-0.464,0.168,8.054,1.607,0.679,-0.247,8.338,0.9,0.523,-0.094,0.269,-0.075,-0.11,3.423,14.103,7.471,6.709,8.614,1.24,8.036,1.325,4.873,0.789,0.13,0.474,-0.081,0.279,-0.088,2.877,3.744,-0.395,0.582,-0.547,2.293,-0.088,0.477,-0.602,0.215,2.641,0.499,3.662,0.626,0.828,2.005,0.251,1.453,3.105,-0.094,1.687,1.428,1.409,0.048,0.504,0.055,3.118,2.094,0.617,9.121,-0.017,0.955,-1.014,-0.802,-1.291,-0.45,0.598,8.786,-0.164,-0.318,-0.458,-0.754,-0.985,-0.192,0.699,6.691,9.787,10.59,-0.61,-0.906,-0.56,-0.635,-0.356,-0.035,-0.275,-0.804,15.912,15.327,9.986,14.012,0.729,-0.447,-0.403,0.298,-0.12,-0.59,-0.283,4.293,7.671,0.104,-0.459,-0.281,-0.17,0.782,0.898,0.082,1.952,11.113,0.58,10.824,5.425,0.288,1.709,0.647,0.231,-0.224,0.239,-0.316,-0.846,0.962,0.44,-0.082,0.742,0.317,0.178,2.352,5.678,4.025,0.921,1.456,0.311,0.167,0.684,0.263,0.425,0.659,-0.127,-0.395,-0.644,-0.147,0.819,0.87,-0.531,-0.195,-1.295,-0.849,4.574,3.254,1.83,8.056,0.583,-0.033,0.598,1.544,3.06,0.258,1.5,0.183,7.816,-0.224,1.754,0.39,0.893,0.015,-0.184,0.496,-0.159,0.699,0.516,-0.324,-0.662,-0.785,-0.177,-0.421,-0.626,3.869,2.032,2.967,2.556,0.449,9.63,13.992,-0.455,-1.091,0.13,-0.331,0.432,10.056,11.259,8.603,9.212,12.595,12.247,8.799,11.882,-0.457,-0.738,3.655,3.038,-1.236,-0.304,-0.19,0.35,-0.14,1.112,-0.11,1.046,0.223,0.303,-0.329,0.502,-0.03,-0.808,-0.441,-0.386,3.232,-0.834,-0.596,0.106,0.489,0.174,5.336,4.609,1.812,0.015,-0.69,4.223,0.163];

  var cancer = [-0.561,-0.247,0.756,2.39,5.913,0.475,0.572,5.262,4.891,0.407,0.156,0.851,-0.334,13.95,13.789,12.323,16.537,-0.294,5.637,6.719,3.844,5.797,3.89,-0.501,9.444,1.464,-0.606,-0.031,2.259,1.822,-0.232,3.097,5.267,8.509,12.105,0.592,-0.451,-0.067,0.05,-0.61,5.689,2.424,11.651,-0.042,-0.171,0.678,-0.507,-0.315,17.111,1.686,8.86,3.461,7.608,-0.077,11.309,1.847,3.043,1.031,6.621,6.26,0.492,0.033,1.526,-0.093,13.605,11.183,2.909,1.482,1.103,0.831,-0.401,-0.333,0.999,0.11,7.724,-0.459,-0.811,3.323,0.102,5.953,4.83,1.01,-0.004,-0.247,-0.165,-0.134,-0.128,5.017,0.352,-0.251,0.047,-0.506,10.951,0.069,0.071,4.634,2.303,-1.245,2.567,-1.697,-1.178,2.203,8.613,11.673,5.006,5.434,0.485,8.887,2.717,0.218,1.186,-0.394,2.995,0.119,-0.556,0.043,-0.157,3.304,1.163,5.677,1.595,2.379,7.784,0.381,6.256,6.731,-0.337,2.024,-0.411,1.947,2.09,0.281,0.01,1.259,-0.183,0.328,9.146,9.749,7.922,0.058,-0.039,0.067,0.403,-0.142,0.332,0.283,-0.115,0.718,0.318,0.136,0.827,0.474,0.093,0.191,-0.638,-0.635,2.443,0.555,2.082,-0.016,8.401,0.01,2.217,-0.332,0.216,2.725,1.823,0.981,-0.547,0.548,0.51,-0.074,0.433,0.73,0.317,7.662,2.285,0.849,-0.609,-0.831,0.331,-0.174,0.902,10.039,11.651,10.065,9.094,2.78,0.699,4.228,5.255,0.621,-0.132,1.352,-0.166,-0.055,-0.114,-0.418,0.049,-0.997,-0.186,2.16,6.021,1.688,0.099,0.055,-0.374,-0.06,12.221,-0.472,-0.418,-0.296,0.426,0.052,0.439,-0.304,-0.393,-0.602,-0.196,-0.07,-0.663,19.048,-0.088,5.821,1.25,0.475,0.497,0.921,9.364,6.593,0.1,-0.176,1.62,3.284,6.445,6.12,10.323,8.741,7.059,4.503,1.035,6.528,1.947,4.1,3.04,4.395,0.352,8.821,-0.054,4.072,0.717,4.886,1.438,0.783,-0.082,5.143,2.397,1.622,5.126,11.048,0.445,2.507,5.332,1.854,0.071,-1.254,2.979,6.027,9.953,1.118,11.451,1.193,7.414,6.422,5.502,-0.176,0.167,10.641,-0.28,0.28,0.957,-0.505,4.193,3.613,6.132,4.997,6.509,6.648,13.527,8.886,10.317,10.088,12.069,2.566,2.839,2.539,1.05,0.002,-0.677,0.483,-0.195,-0.32,1.419,-0.644,-0.546,-0.49,1.026,-0.359,9.59,9.082,3.063,17.56,4.871,-0.145,6.771,6.456,0.386,6.025,0.172,-0.073,7.602,8.724,-0.138,0.495,-0.905,-0.904,-0.627,2.726,1.6,2.128,-0.743,-0.111,0.219,0.317,0.999,-0.007,2.285,3.337,16.894,0.324,-0.26,10.022,3.654,3.151,1.897,2.426,0.61,0.369,-0.496,0.016,-0.833,-0.329,-0.543,-0.578,-0.562,-0.331,5.07,-0.491,5.674,6.513,-0.436,0.911,-0.16,7.211,8.352,3.158,0.206,0.131,-0.366,1.247,-0.575,3.143,2.323,0.394,1.473,2.638,4.653,5.072,0.177,-0.597,-0.848,-0.904,-0.268,-0.377,-0.485,3.546,0.496,-0.9,5.169,0.071,9.424,-0.13,3.608,5.73,7.202,-0.401,-0.481,2.171,1.365,0.407,-0.265,-0.088,-1,-1.19,-1.416,2.497,2.919,1.099,1.765,-0.07,-0.658,9.001,-0.141,-0.297,8.876,8.628,-0.73,0.895,8.184,6.066,7.356,0.39,3.579,-0.196,0.409,0.711,0.45,-0.289,1.211,2.16,8.793,-0.674,-0.781,-0.18,12.349,10.524,10.751,4.903,0.032,4.41,5.869,11.061,11.327,0.911,-0.561,1.716,0.078,-0.405,10.137,7.674,0.433,0.769,12.419,7.918,9.467,17.95,7.747,7.029,6.598,12.439,5.069,7.522,8.171,5.013,7.75,8.412,-0.89,-0.052,-0.246,-0.752,2.767,1.374,5.274,2.982,0.112,4.816,5.307,0.778,-0.371,-0.468,0.494,0.189,-0.869,1.2,3.649,6.092,-0.671,2.364,4.624,1.759,2.445,12.785,0.655,-0.989,4.397,1.575,-0.402,1.137,0.851,2.027,0.52,3.054,-0.03,0.993,6.859,1.265,2.234,3.218,-0.481,-0.217,-0.546,-0.103,0.27,0.968,0.775,0.834,-0.585,-0.769,1.498,7.993,3.139,2.565,4.237,-0.262,0.507,-0.086,0.154,-0.012,1.063,1.13,0.5,-0.073,10.693,2.269,0.107,0.194,4.908,6.431,5.847,4.399,0.589,-0.787,-0.331,1.253,4.996,3.046,0.018,0.391,-0.091,1.156,1.124,-0.44,6.863,-0.48,-0.542,9.481,0.849,0.669,5.807,0.422,0.28,1.19,0.435,9.254,-0.915,10.332,5.855,-0.958,5.412,4.731,0.346,-0.139,7.633,0.947,0.057,0.466,0.548,-0.235,0.492,-0.273,0.435,-0.199,-0.466,3.361,3.331,4.761,6.709,0.035,0.078,-0.506,2.726,2.828,-0.468,1.639,6.101,1.366,-0.27,6.089,6.5,-0.254,-0.428,3.251,4.394,5.777,0.764,-0.141,8.98,8.881,9.474,10.06,-1.125,6.266,9.138,9.817,9.668,5.335,-0.137,0.177,8.905,0.233,-0.027,0.497,-0.459,0.3,0.327,0.441,-0.219,5.447,-0.455,7.698,8.897,6.69,2.042,7.066,3.371,4.072,1.871,1.497,7.257,5.242,-0.075,6.815,1.336,3.914,-0.445,-0.633,-0.502,0.077,5.993,6.801,7.433,7.053,1.641,3.695,6,0.292,-0.125,7.416,4.544,1.132,-0.001,0.135,2.827,3.037,4.928,0.648,13.554,3.381,-0.281,2.404,0.174,-0.141,-0.272,7.624,6.144,1.123,0.306,2.085,0.793,0.785,1.085,1.169,0.654,1.113,-0.223,7.168,6.56,-0.22,-0.517,8.387,0.519,0.135,5.567,4.255,0.806,5.479,2.661,-0.508,0.811,-0.009,0.427,-0.031,-0.343,0.551,2.981,0.242,12.602,2.897,4.33,0.53,0.27,2.14,0.489,-0.684,-0.269,-0.063,1.363,-0.322,4.753,-0.055,18.028,11.142,0.051,0.905,-0.253,4.886,-0.409,-0.482,4.147,3.37,-0.085,0.226,11.135,1.742,-0.459,0.044,0.885,1.093,1.231,-0.696,-0.109,-0.037,10.295,8.665,1.281,2.059,6.534,-0.234,0.499,-0.288,-0.992,1.014,4.333,0.357,1.382,6.601,3.165,0.064,-1.011,0.158,0.016,7.686,0.877,0.247,0.355,5.492,-0.419,2.84,5.258,0.654,0.645,0.294,1.602,0.317,-0.525,-0.736,-0.016,0.268,0.772,-0.445,-0.202,-0.095,-0.092,5.929,1.755,2.738,-0.096,2.736,-0.541,6.549,8.462,8.995,0.251,0.85,0.54,-0.158,0.622,1.623,14.6,5.538,0.992,9.547,2.241,-0.033,5.757,6.043,2.915,1.613,2.15,0.587,-0.319,-0.118,0.459,0.062,7.46,6.373,-0.289,0.416,1.912,2.933,0.149,1.321,4.528,-0.565,0.554,3.052,0.908,10.26,13.031,11.751,1.03,1.916,0.368,0.529,-0.308,-0.384,0.209,-0.344,-0.254,-0.551,9.929,0.746,0.072,4.823,-0.133,0.342,1.28,2.764,1.517,1.558,1.173,0.409,0.413,0.949,0.059,0.29,2.429,5.306,0.244,3.91,1.154,0.936,3.509,1.794,0.969,10.025,0.365,0.348,0.221,12.424,8.324,3.244,4.799,1.046,-0.133,0.944,0.878,3.729,-0.908,-0.382,-0.373,5.565,-0.139,2.713,-0.855,1.905,4.792,7.388,2.477,2.478,-0.663,-0.78,-0.622,3.919,2.024,1.017,6.237,3.184,0.749,0.696,1.382,5.451,-0.523,1.495,5.949,-0.306,16.113,19.046,0.12,2.851,2.508,0.724,5.378,-0.639,4.241,1.909,2.382,4.15,0.721,-0.44,3.629,10.308,-0.964,-0.35,0.021,-0.529,8.141,-0.635,0.141,1.791,9.721,-0.416,8.642,0.138,2.685,0.11,1.644,4.077,1.545,3.37,-0.484,4.103,-0.569,5.02,5.124,3.038,0.135,1.611,1.374,-0.679,0.594,-0.26,0.38,2.73,1.308,-0.474,7.592,-1.846,-0.157,0.354,1.415,0.617,0.732,1.807,0.738,-0.598,0.908,6.936,5.062,6.01,-0.438,3.269,-0.049,8.016,-0.497,2.149,1.581,1.219,4.453,-0.412,3.101,0.837,10.092,1.684,0.547,0.282,2.074,2.615,8.758,-0.057,6.009,5.109,0.961,1.374,0.683,1.093,5.638,-0.253,10.806,0.987,9.877,1.407,1.846,1.012,1.095,-0.298,-0.327,1.072,4.062,4.53,7.838,5.493,1.945,0.864,6.175,1.166,2.43,3.128,4.003,6.477,0.303,6.387,3.056,0.631,0.306,0.963,7.268,1.518,2.471,-0.365,5.106,3.178,0.079,-0.834,-0.304,-0.281,1.012,4.69,9.781,-0.593,0.256,-0.327,-0.789,1.342,3.946,2.659,-0.286,4.753,1.086,-0.666,9.676,0.851,1.352,3.744,0.372,-0.452,5.394,3.308,2.11,6.046,0.138,0.019,0.39,1.94,-0.318,-0.508,2.043,0.627,4.662,2.463,-0.109,8.087,0.778,-0.457,1.332,1.178,1.383,-0.03,0.739,-0.198,0.573,0.146,-0.587,0.788,7.941,0.083,2.363,-0.912,1.898,0.829,0.526,0.348,0.506,-0.315,4.81,-0.411,2.309,5.372,5.631,2.43,0.318,5.657,8.673,-0.146,0.185,-0.447,-0.91,0.011,-0.285,3.539,4.109,0.488,3.342,4.981,0.077,1.571,4.364,3.608,10.889,3.452,0.849,1.117,-0.029,9.794,12.978,-1.042,0.253,0.065,1.897,5.739,2.968,2.173,1.003,1.78,0.008,17.86,-0.06,-0.287,0.268,0.318,7.914,1.216,0.157,-0.318,-0.504,5.774,0.628,1.89,-0.799,0.257,6.894,-0.469,-0.845,-0.366,0.246,-0.912,2.304,2.187,1.882,3.716,1.1,6.032,-0.28,2.858,3.992,5.203,-0.223,0.392,-0.227,0.179,5.683,-0.207,-0.05,2.655,6.019,2.993,1.064,8.069,-0.952,-0.346,2.092,0.218,0.158,0.869,3.909,3.037,-0.099,-0.372,5.013,6.182,0.436,-0.047,-0.267,11.823,-0.728,5.629,0.075,-0.837,1.115,3.646,0.075,-0.471,0.132,-0.54,7.975,-0.602,1.567,0.124,0.482,-0.012,-0.122,0.61,1.616,3.81,-0.36,-0.699,-0.356,7.562,6.627,-1.181,-0.263,1.252,2.854,0.609,2.248,-0.572,9.758,9.547,2.203,-0.497,9.505,1.747,7.108,4.406,-0.829,1.8,6.007,-0.612,3.682,10.213,8.621,1.374,-0.57,4.506,-0.631,0.703,11.064,11.217,6.531,0.336,-0.431,-0.484,-0.386,-0.508,-0.212,0.087,-0.488,-0.066,-1.041,5.293,-0.33,-0.616,-0.507,-0.032,-0.318,-0.509,-0.321,-0.393,7.163,-0.535,-1.167,3.779,0.27,6.627,6.822,-0.352,3.914,-0.238,-0.991,1.426,-0.639,2.06,3.858,7.991,3.805,2.085,1.957,-0.476,-0.054,-0.435,-0.573,-0.412,1.378,7.004,0.642,3.937,0.322,-0.251,-0.734,-0.904,-0.637,-0.106,-0.708,1.18,-0.323,0.466,3.094,3.583,3.323,2.434,4.329,1.229,0.804,0.212,4.589,-0.057,2.317,1.534,-0.617,-0.595,2.87,3.865,-0.449,0.357,-0.188,0.153,-0.762,0.53,-0.776,-0.32,-0.731,6.503,11.087,10.569,5.831,1.808,8.809,9.593,5.731,-0.16,-0.641,0.282,0.243,6.135,13.547,12.102,5.805,-0.628,-1.473,-0.734,4.596,0.134,-0.199,-0.56,4.228,5.917,8.491,7.696,8.022,10.267,9.756,7.137,8.654,-0.338,-0.556,-0.437,1.161,-1.056,5.565,3.159,0.169,0.158,-0.419,-0.451,-2.37,-0.63,-0.49,-0.841,0.871,3.639,-0.166,6.259,0.425,-0.281,-0.426,10.109,1.805,0.643,-0.884,-0.159,-0.205,-0.119,-0.569,5.032,6.295,7.206,1.108,-0.608,-0.783,-0.781,4.634,-1.248,4.364,1.873,4.217,7.839,1.747,-0.269,0.889,0.463,0.643,-0.366,3.226,8.596,0.232,-0.155,-0.331,1.447,-0.608,0.857,0.315,1.529,-1.064,3.028,-0.081,4.45,3.262,-0.224,-0.285,3.715,3.455,3.877,0.479,1.823,4.307,-0.121,-0.215,4.666,6.133,5.346,-0.43,1.661,0.034,0.903,11.625,9.35,5.711,-0.361,-0.921,6.571,0.091,0.014,1.204,0.123,0.035,-0.897,0.189,-0.072,-0.621,0.14,-0.411,0.709,-0.007,0.691,-0.19,0.434,0.334,-0.237,-0.151,9.34,6.386,0.831,5.874,1.306,9.658,0.944,7.745,5.082,7.165,1.057,2.378,-0.127,0.054,1.376,0.349,-0.444,-0.411,-0.573,-0.135,-0.249,-0.332,0.977,0.07,4.225,-0.16,7.248,-0.995,0.475,7.534,9.139,10.151,3.094,1.03,1.883,2.827,0.688,0.739,1.493,-0.252,-0.714,-0.093,0.022,-0.666,-0.597,2.022,0.151,-0.307,3.78,9.825,-0.234,0.038,-0.292,-0.419,2.073,2.53,3.112,3.058,3.693,1.109,8.498,11.007,6.294,13.609,13.499,-0.818,2.091,-0.904,-0.342,2.42,0.927,3.238,-0.837,-0.858,-0.923,-0.243,8.686,0.501,-0.119,-0.649,8.518,-0.13,0.427,0.384,1.074,0.025,0.046,2.876,13.979,7.214,6.717,10.364,1.354,8.742,1.597,5.907,0.35,-0.418,-0.08,-0.511,0.405,-0.494,1.785,2.035,-0.738,0.866,0.11,3.932,0.276,1.274,-0.109,2.199,6.073,4.35,7.397,1.275,1.277,3.859,0.257,0.516,1.427,-0.446,5.397,4.211,3.677,-0.25,0.438,-0.204,3.001,4.654,1.149,8.376,-0.462,0.871,-0.115,-0.374,-1.284,-0.565,0.367,8.783,-0.038,-0.206,-0.75,-0.314,-0.571,-0.124,-0.492,6.847,9.941,10.892,-0.566,-0.844,0.07,-0.24,-0.338,-0.602,-0.393,-0.799,16.745,16.78,10.203,14.673,0.675,-0.219,-0.376,0.642,-0.091,-0.471,-0.331,3.213,6.388,0.09,-0.217,-0.27,-0.199,-0.06,0.397,-0.371,2.657,9.977,1.216,6.638,2.993,1.768,1.464,-0.242,0.016,1.775,0.228,-0.114,-0.67,0.234,0.209,-0.382,0.131,0.071,-0.234,2.943,5.726,5.533,3.266,3.721,1.887,0.474,0.784,0.501,0.576,0.65,0.318,-0.194,-0.147,-0.025,1.06,0.655,-0.58,0.126,-1.191,0.103,3.701,2.476,3.662,8.796,0.115,0.545,0.686,2.42,1.649,0.161,2.771,0.979,8.382,-0.378,2.425,1.278,1.302,0.163,0.402,0.472,-0.811,0.754,0.124,-0.19,-0.623,-1.127,-0.586,-0.614,-0.356,2.993,1.738,3.093,2.789,0.372,8.587,12.264,0.609,-0.3,-0.461,-0.383,0.14,10.547,11.781,9.004,9.945,12.94,12.333,8.153,10.879,0.014,-0.331,3.798,2.669,-0.97,-0.445,0.273,-0.074,-0.354,0.795,1.035,1.825,0.454,-0.479,0.015,2.182,-0.081,-0.715,-0.177,-0.426,3.737,-0.291,0.075,1.948,1.061,0.599,5.508,4.716,1.943,0.349,-0.851,3.71,-0.276];

  var n = normal.length;
  var items = u.array.range(n).map(function(i) { return { x: cancer[i], y: normal[i], w: w * ratio, h: h * ratio, value: [cancer[i], normal[i]]}});
  items.forEach(function(item) {
    qt.insert(item.x, item.y, item.w, item.h, item.value);
  });
  var values = qt.values();
  assert.ok(values.every(function(value) { return u.array.indexOf(items, function(item) { return item.value == value; }) >= 0; }));

  var qtItems = qt.items();
  var eq = function(x, y) { return Math.abs(x - y) < 0.0001; };
  assert.ok(qtItems.every(function(item) { return u.array.indexOf(items, function(it) {
      return eq(it.x, item.x) && eq(it.y, item.y) && eq(it.w, item.w) && eq(it.h, item.h) && it.value == item.value;
    }) >= 0; }));

  var svgSize = 750;
  var xScale = d3.scale.linear().domain([x, x+w])
    .range([0, svgSize]);
  var yScale = d3.scale.linear().domain([y, y+h])
    .range([0, svgSize]);

  var svg = d3.select('#qunit-test-output-' + assert.test.testId)
    .append('svg')
    .attr('width', svgSize + 'px')
    .attr('height', svgSize + 'px');
  svg
    .append('rect')
    .style('fill', '#ffffff')
    .attr('width', '100%')
    .attr('height', '100%');

  var viewport = svg.append('g').attr('class', 'viewport').attr('transform', 'scale(1, -1) translate(0, ' + (-svgSize) + ')');

  var selection = viewport.selectAll('circle').data(items);

  selection.enter()
    .append('circle');

  selection
    .attr('r', ratio * svgSize)
    .attr('cx', function(d) { return xScale(d.x); })
    .attr('cy', function(d) { return yScale(d.y); })
    .attr('fill', '#ff6520')
    .style('fill-opacity', 0.4)
    .style('stroke', '#ff6520');

  selection.exit()
    .remove();

  var leaves = qt.leaves();
  selection = viewport.selectAll('rect').data(leaves);
  selection.enter().append('rect');
  selection
    .attr('x', function(d) { return xScale(d.x); })
    .attr('y', function(d) { return yScale(d.y); })
    .attr('width', function(d) { return xScale(d.x + d.w) - xScale(d.x); })
    .attr('height', function(d) { return yScale(d.y + d.h) - yScale(d.y); })
    .style('stroke', '#444')
    .style('fill', 'none')
    .style('stroke-opacity', '0.4')
    .attr('data-items', function(d) { return JSON.stringify(d.items); });

  var invXScale = d3.scale.linear().domain([0, svgSize]).range([x, x+w]);
  var invYScale = d3.scale.linear().domain([0, svgSize]).range([y, y+h]);

  var r = {x0:invXScale(57), y0:invYScale(41), x1:invXScale(287), y1:invYScale(115)};

  var overlaps = qt.overlaps(r.x0, r.y0, r.x1 - r.x0, r.y1 - r.y0);

  overlaps.forEach(function(item) {
    assert.equal(items.filter(function(it) { return it.value == item.value; }).length, 1);
  });

  items.filter(function(it) { return it.x + it.w >= r.x0 && it.y + it.h >= r.y0 && it.x < r.x1 && it.y < r.y1; })
    .forEach(function(item) {
      assert.equal(overlaps.filter(function(it) { return it.value == item.value; }).length, 1);
    });
});




QUnit.test('u.each', function(assert) {
  assert.ok(u.each);

  var obj = {'a': 'x', 'b': 7, '9': 'f'};
  var expObj = [['9', 'f'], ['a', 'x'], ['b', 7]];
  var actObj = [];
  u.each(obj, function(k, v) { actObj.push([k, v]); });

  assert.deepEqual(actObj, expObj);

  var arr = ['x', 7, 'f'];
  var expArr = [[0, 'x'], [1, 7], [2, 'f']];
  var actArr = [];
  u.each(arr, function(i, v) { actArr.push([i, v]); });

  assert.deepEqual(actArr, expArr);
});

QUnit.test('u.map', function(assert) {
  assert.ok(u.map);

  var obj = {1: 'a', 'x': 'b', 'y': 2};
  var exp = ['a1', 'b1', 3];
  var act = u.map(obj, function(v) { return v + 1; });

  assert.deepEqual(act, exp);

  var arr = ['a', 'b', 2];
  act = u.map(arr, function(v) { return v + 1; });
  assert.deepEqual(act, exp);

  obj[4] = 5;
  exp = ['1a1', '451', 'xb1', 'y21'];
  act = u.map(obj, function(v, k) { return k + v + 1; });
  assert.deepEqual(act, exp);
});

QUnit.test('u.copy', function(assert) {
  assert.ok(u.copy);

  var obj = {1: 'a', 'x': 'b', 'y': 2};
  assert.deepEqual(u.copy(obj), obj);
  notEqual(u.copy(obj), obj);

  var arr = ['a', 'b', 2];
  assert.deepEqual(u.copy(arr), arr);
  notEqual(u.copy(arr), arr);
});

QUnit.test('u.mapToObject', function(assert) {
  assert.ok(u.mapToObject);

  var actual = u.mapToObject([1,2,3,4,5], function(x) { return {'key': x % 3, 'value': x}});
  assert.deepEqual(actual, {1:4, 2:5, 0:3 });
});

QUnit.test('u.extend', function(assert) {
  assert.ok(u.extend);

  var defaults = { name: 'John', age: 17, weight: 55 };
  var overrides = {name: 'Jack', age: 28, color: 'green' };
  var act = u.extend(defaults, overrides);

  var exp = { name: 'Jack', age: 28, weight: 55, color: 'green' };
  assert.deepEqual(act, exp);

  act = u.extend({}, defaults, overrides);
  assert.deepEqual(act, exp);
});

QUnit.test('u.generatePseudoGUID', function(assert) {
  assert.ok(u.generatePseudoGUID);

  assert.equal(u.generatePseudoGUID(6).length, 6);
  assert.equal(typeof u.generatePseudoGUID(6), 'string');
  assert.notOk(u.generatePseudoGUID(6) == u.generatePseudoGUID(6));
});

QUnit.test('u.httpGet', function(assert) {
  var done = assert.async();
  assert.ok(u.httpGet);

  var exp = '@transition-speed: 0.5s;\n' +
            '@light-gray: #ddd;\n' +
            '@medium-gray: #808080;\n' +
            '@dark-gray: #494949;\n' +
            '@transparent-light-gray: rgba(0, 0, 0, 0.025);\n' +
            '@transparent-gray: rgba(0, 0, 0, 0.05);\n' +
            '@transparent-dark-gray: rgba(0, 0, 0, 0.075);\n' +
            '@item-max-height: 120px;\n';

  u.httpGet('variables.less.txt')
    .then(
    function(act) {
      assert.equal(act, exp);
      done();
    },
    function(reason) {
      assert.notOk(reason);
      done();
    }
  );
});

QUnit.test('u.parseLessConsts', function(assert) {
  var done = assert.async();
  assert.ok(u.parseLessConsts);

  var exp = {
    'transition-speed':       '0.5s',
    'light-gray':             '#ddd',
    'medium-gray':            '#808080',
    'dark-gray':              '#494949',
    'transparent-light-gray': 'rgba(0, 0, 0, 0.025)',
    'transparent-gray':       'rgba(0, 0, 0, 0.05)',
    'transparent-dark-gray':  'rgba(0, 0, 0, 0.075)',
    'item-max-height':        '120px'
  };

  u.parseLessConsts({uri: 'variables.less.txt'})
    .then(function(act) {
      assert.deepEqual(act, exp);
      done();
    });
});

QUnit.test('u.reflowForTransition', function(assert) {
  assert.ok(u.reflowForTransition);
});

QUnit.test('u.gravatar', function(assert) {
  assert.ok(u.gravatar);
  assert.equal(u.gravatar('florin.chelaru@gmail.com', {size: 150}), 'http://www.gravatar.com/avatar/bc33879346ddc86d6d0f855a5fb85c69?r=g&s=150');
});

QUnit.test('u.hex2rgb', function(assert) {
  assert.ok(u.hex2rgb);

  var rgb = u.hex2rgb('#299dff');
  assert.ok(rgb);
  assert.ok(rgb.r);
  assert.ok(rgb.g);
  assert.ok(rgb.b);
  assert.equal(rgb.r, 41);
  assert.equal(rgb.g, 157);
  assert.equal(rgb.b, 255);
});

QUnit.test('u.hex2rgba', function(assert) {
  assert.ok(u.hex2rgba);

  var rgba = u.hex2rgba('#299dff', 0.4);
  assert.ok(rgba);
  assert.equal(rgba, 'rgba(41,157,255,0.4)');
});

QUnit.test('u.rgb2hex', function(assert) {
  assert.ok(u.rgb2hex);

  var hex = u.rgb2hex(41, 157, 255);
  assert.ok(hex);
  assert.equal(hex, '#299dff');
});

QUnit.test('u.lighten', function(assert) {
  assert.ok(u.lighten);

  var hex = '#2196F3';

  var lightened = u.lighten(hex, 0.35);
  assert.equal(lightened, '#cae6fc');
});

QUnit.test('u.darken', function(assert) {
  assert.ok(u.darken);

  var hex = '#2196F3';

  var darkened = u.darken(hex, 0.35);
  assert.equal(darkened, '#05355c');
});

QUnit.test('u.array.range', function(assert) {
  assert.ok(u.array.range);

  assert.deepEqual(u.array.range(4), [0, 1, 2, 3]);
  assert.deepEqual(u.array.range(3, 4), [4, 5, 6]);
});

QUnit.test('u.array.fill', function(assert) {
  assert.ok(u.array.fill);

  var exp = [2, 2, 2];
  var act = u.array.fill(3, 2);
  assert.deepEqual(act, exp);
});

QUnit.test('u.array.fromArguments', function(assert) {
  ok(u.array.fromArguments);

  var params = [1, 'a', new u.Exception('my message')];
  var args = (function () {
    return arguments;
  })(params[0], params[1], params[2]);

  assert.deepEqual(params, u.array.fromArguments(args));
});

QUnit.test('u.array.unique', function(assert) {
  ok(u.array.unique);

  var e = new u.Exception('my message');
  var arr = [1, 'a', e, e, e, 'a', 7, 'a', 'b', 1, 12];
  var exp = [1, 'a', e, 7, 'b', 12];
  assert.deepEqual(u.array.unique(arr), exp);

  var a2 = [{a:1}, {b:2}, {a:1}, {c:3}, {b:2}, {d:4}, {b:2}];
  assert.deepEqual(u.array.unique(a2, function(e1, e2) { return Object.keys(e1)[0] == Object.keys(e2)[0]; }), [{a:1}, {b:2}, {c:3}, {d:4}]);
});

QUnit.test('u.array.uniqueFast', function(assert) {
  ok(u.array.uniqueFast);

  var e = new u.Exception('my message');
  var arr = [1, 'a', 'a', 7, 'a', 'b', 1, 12];
  var exp = [1, 'a', 7, 'b', 12];
  assert.deepEqual(u.array.uniqueFast(arr), exp);
});

QUnit.test('u.array.uniqueKey', function(assert) {
  ok(u.array.uniqueKey);

  var e = new u.Exception('my message');
  var e2 = new u.Exception('my message');
  var e3 = new u.Exception('my other message');
  var arr = [1, 'a', e, e2, e, e3, e, 'a', 7, 'a', 'b', 1, 12];
  var exp = [1, 'a', e, e3, 7, 'b', 12];
  assert.deepEqual(u.array.uniqueKey(arr, function(it) {
    return (it instanceof u.Exception) ? it.message : it;
  }), exp);
});

QUnit.test('u.array.indexOf', function(assert) {
  ok(u.array.indexOf);

  var e = new u.Exception('my message');
  var arr = [1, 'a', e, e, e, 'a', 7, 'a', 'b', 1, 12];

  assert.equal(u.array.indexOf(arr, function(el, i) {
    return el instanceof u.Exception;
  }), 2);
});


QUnit.test('u.reflection.evaluateFullyQualifiedTypeName', function(assert) {
  assert.ok(u.reflection.evaluateFullyQualifiedTypeName);

  assert.deepEqual(u.reflection.evaluateFullyQualifiedTypeName('u.Exception'), u.Exception);
});

QUnit.test('u.reflection.applyConstructor', function(assert) {
  assert.ok(u.reflection.applyConstructor);

  var inner = Error('something');
  var act = u.reflection.applyConstructor(u.Exception, ['my new message', inner]);
  var exp = new u.Exception('my new message', inner);

  assert.ok(act instanceof u.Exception);
  assert.equal(act.message, 'my new message');
  assert.equal(act.innerException, inner);
});

QUnit.test('u.reflection.wrap', function(assert) {
  assert.ok(u.reflection.wrap);

  var Foo = function(x) { this.x = x; };
  Foo.prototype.bar = function() { return this.x; };

  var obj = {x: '10'};
  var wrapped = u.reflection.wrap(obj, Foo);

  //assert.ok(obj instanceof Foo);
  //assert.ok(obj.bar);
  //assert.equal(obj.bar(), '10');

  assert.notOk(obj instanceof Foo);
  assert.ok(wrapped instanceof Foo);
  assert.ok(wrapped.bar);
  assert.notOk(obj.bar);
  assert.equal(wrapped.bar(), '10');
  wrapped.x = 20;
  assert.equal(wrapped.x, 20);
  assert.equal(wrapped.x, obj.x);
  assert.equal(JSON.stringify(wrapped), JSON.stringify(obj));
});

QUnit.test('u.reflection.ReflectionException', function(assert) {
  assert.ok(u.reflection.ReflectionException);

  var inner = Error('another message');
  var e = new u.reflection.ReflectionException('my message', inner);
  assert.equal(e.message, 'my message');
  assert.equal(e.name, 'ReflectionException');
  assert.deepEqual(e.innerException, inner);
});


QUnit.test('u.string.capitalizeFirstLetter', function(assert) {
  assert.ok(u.string.capitalizeFirstLetter);

  assert.equal(u.string.capitalizeFirstLetter('test'), 'Test');
  assert.equal(u.string.capitalizeFirstLetter(''), '');
  assert.equal(u.string.capitalizeFirstLetter('12ab'), '12ab');
});


QUnit.test('u.math.floorPrecision', function(assert) {
  assert.ok(u.math.floorPrecision);

  assert.equal(u.math.floorPrecision(2.123456, 3), 2.123);
  assert.equal(u.math.floorPrecision(2.123456, 0), 2);
  assert.equal(u.math.floorPrecision(2.123456, 8), 2.123456);
});

QUnit.test('u.math.scaleLinear', function(assert) {
  assert.ok(u.math.scaleLinear);

  var scale = u.math.scaleLinear([10, 20], [400, 500]);
  assert.equal(scale(12), 420);
  assert.equal(scale(17), 470);

  scale = u.math.scaleLinear([10, 20], [600, 500]);
  assert.equal(scale(12), 580);
  assert.equal(scale(17), 530);
});

QUnit.test('u.math.rad2deg', function(assert) {
  assert.ok(u.math.rad2deg);

  var deg = u.math.rad2deg(Math.PI * 0.5);
  assert.equal(deg, 90);
});

QUnit.test('u.math.deg2rad', function(assert) {
  assert.ok(u.math.deg2rad);

  var rad = u.math.deg2rad(90);
  assert.equal(rad, Math.PI * 0.5);
});



var RAND = [0, 9, 1, 1, 8, 3, 8, 5, 6, 4, 9, 3, 2, 6, 4, 8, 2, 8, 0, 7, 0, 4, 9, 8, 6, 3, 1, 8, 4, 4, 2, 3, 0, 3, 9, 6, 2, 0, 1, 2, 7, 3, 1, 9, 1, 6, 2, 2, 3, 1, 9, 8, 8, 9, 2, 8, 4, 6, 2, 1, 6, 3, 3, 8, 4, 7, 0, 3, 5, 1, 4, 1, 3, 7, 2, 2, 9, 3, 3, 2, 9, 1, 7, 1, 4, 2, 5, 2, 0, 9, 3, 6, 0, 6, 3, 6, 9, 1, 0, 9, 3, 3, 4, 0, 1, 3, 3, 4, 9, 7, 6, 2, 7, 5, 0, 7, 8, 3, 5, 2, 5, 4, 1, 7, 5, 3, 4, 7, 8, 6, 1, 8, 8, 9, 1, 6, 0, 8, 9, 4, 3, 6, 0, 7, 5, 0, 5, 5, 0, 5, 8, 6, 0, 2, 6, 0, 4, 8, 6, 6, 5, 6, 4, 2, 7, 4, 5, 2, 0, 1, 4, 8, 3, 0, 3, 5, 9, 7, 9, 5, 4, 3, 5, 3, 4, 4, 3, 3, 6, 2, 5, 4, 3, 8, 1, 3, 8, 4, 4, 1, 0, 0, 5, 2, 5, 3, 5, 2, 8, 0, 6, 7, 5, 9, 3, 4, 3, 0, 5, 6, 0, 5, 2, 3, 2, 4, 3, 2, 4, 0, 5, 8, 6, 8, 6, 5, 3, 6, 6, 1, 4, 9, 8, 2, 5, 0, 1, 0, 3, 1, 1, 1, 3, 1, 2, 5, 5, 7, 3, 5, 2, 0, 9, 8, 5, 5, 8, 5, 4, 4, 0, 9, 0, 1, 2, 5, 1, 0, 6, 8, 9, 8, 0, 1, 0, 5, 5, 0, 0, 3, 7, 8, 2, 9, 6, 6, 7, 0, 3, 3, 1, 5, 2, 6, 2, 7, 1, 8, 5, 0, 8, 7, 7, 1, 6, 3, 6, 4, 0, 4, 8, 6, 9, 4, 3, 3, 2, 2, 3, 6, 2, 6, 4, 3, 0, 7, 7, 0, 3, 6, 2, 4, 5, 4, 8, 2, 6, 1, 0, 4, 8, 5, 8, 4, 2, 2, 6, 8, 6, 0, 8, 4, 2, 3, 3, 1, 0, 9, 0, 9, 6, 2, 0, 2, 2, 2, 2, 8, 7, 9, 2, 6, 7, 9, 7, 7, 0, 7, 7, 4, 1, 5, 9, 1, 8, 7, 1, 6, 2, 6, 1, 9, 2, 1, 5, 8, 1, 0, 0, 5, 6, 7, 8, 1, 5, 0, 4, 9, 3, 8, 6, 5, 1, 3, 5, 1, 4, 4, 9, 6, 2, 4, 3, 3, 9, 2, 0, 7, 0, 6, 1, 9, 4, 1, 8, 9, 0, 5, 8, 7, 4, 0, 6, 2, 8, 8, 4, 3, 3, 2, 9, 6, 4, 8, 3, 6, 2, 7, 0, 8, 5, 7, 1, 0, 1, 1, 8, 7, 3, 8, 9, 5, 0, 4, 9, 0, 5, 5, 3, 4, 5, 2, 3, 8, 1, 2, 3, 5, 5, 4, 5, 1, 7, 2, 6, 9, 3, 9, 9, 4, 6, 7, 5, 6, 1, 9, 8, 0, 8, 3, 3, 6, 4, 5, 7, 6, 5, 1, 9, 0, 8, 3, 8, 3, 5, 3, 7, 7, 4, 5, 4, 0, 8, 6, 8, 0, 4, 6, 6, 0, 5, 2, 1, 5, 9, 9, 8, 9, 1, 0, 2, 5, 5, 3, 6, 4, 4, 2, 3, 4, 2, 9, 4, 6, 3, 6, 8, 9, 9, 9, 1, 5, 6, 1, 2, 8, 0, 9, 7, 9, 4, 2, 9, 5, 0, 7, 8, 7, 5, 7, 3, 0, 2, 8, 4, 8, 0, 7, 3, 6, 0, 0, 5, 9, 6, 3, 1, 8, 3, 3, 1, 7, 9, 8, 2, 6, 7, 6, 2, 0, 2, 2, 8, 2, 1, 0, 9, 7, 6, 0, 6, 3, 2, 0, 5, 7, 2, 9, 6, 0, 1, 9, 1, 9, 3, 1, 4, 0, 1, 5, 6, 5, 7, 5, 0, 4, 3, 8, 8, 8, 5, 8, 3, 0, 6, 9, 9, 4, 9, 1, 8, 5, 2, 2, 5, 8, 2, 7, 3, 9, 6, 4, 8, 3, 3, 7, 9, 6, 3, 6, 5, 4, 2, 8, 4, 5, 3, 5, 3, 5, 2, 0, 9, 6, 4, 6, 3, 3, 3, 2, 9, 2, 7, 9, 8, 1, 3, 2, 2, 5, 5, 3, 0, 8, 5, 4, 9, 3, 3, 6, 1, 5, 8, 2, 1, 7, 1, 2, 4, 0, 8, 7, 0, 6, 0, 0, 2, 5, 4, 4, 2, 2, 1, 3, 8, 3, 9, 2, 9, 8, 4, 4, 5, 4, 2, 1, 6, 6, 8, 0, 8, 8, 2, 4, 9, 1, 6, 6, 0, 3, 0, 3, 7, 7, 8, 4, 0, 0, 3, 7, 0, 6, 5, 2, 8, 8, 0, 0, 2, 7, 7, 9, 2, 4, 6, 0, 8, 8, 6, 1, 8, 3, 3, 0, 7, 3, 4, 9, 9, 7, 7, 4, 2, 0, 2, 1, 0, 7, 5, 5, 5, 0, 1, 3, 3, 9, 8, 3, 4, 5, 3, 5, 4, 4, 3, 5, 4, 0, 3, 2, 5, 3, 4, 9, 5, 5, 0, 4, 9, 9, 8, 8, 6, 0, 8, 7, 7, 8, 0, 6, 4, 4, 5, 1, 1, 7, 8, 8, 0, 3, 1, 1, 6, 6, 4, 0, 6, 8, 8, 1, 4, 2, 6, 7, 8, 9, 5, 6, 2, 2, 7, 9, 8, 9, 5, 8, 8, 9, 1, 5, 1, 6, 6, 8, 9, 6, 6, 0, 3, 1, 7, 2, 8, 6, 1, 6, 8, 2, 7, 9, 7, 8, 0, 2, 7, 8, 2, 9, 4, 3, 6, 6, 4, 6, 9, 5, 8, 7, 1, 1, 2, 5, 9, 1, 6, 7, 7, 9, 5, 8, 7, 6, 1, 6, 0, 7, 1, 2, 3, 3, 7, 6, 2, 1, 6, 4, 4, 9, 4, 4, 5, 6, 1, 3, 6, 8, 4, 7, 5, 8];

QUnit.test('u.async.for [sequential]', function(assert) {
  var done = assert.async();
  assert.ok(u.async.for);

  var finished = false;
  var n = 100;
  var exp = u.array.range(n);

  var act = [];
  u.async.for(n, function(i) {
    return new Promise(function(resolve, reject) {
      setTimeout(function () {
        act.push(i);
        resolve();
      }, RAND[i]);
    });
  }, true)
    .then(function() {
      if (!finished) {
        assert.deepEqual(act, exp);
        finished = true;
        done();
      }
    });

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 15000);
});

QUnit.test('u.async.for [parallel]', function(assert) {
  var done = assert.async();
  assert.ok(u.async.for);

  var finished = false;
  var n = 100;
  var exp = u.array.range(n);

  var act = [];
  u.async.for(n, function(i) {
    return new Promise(function(resolve, reject) {
      setTimeout(function() {
        act.push(i);
        resolve();
      }, RAND[i]);
    });
  }, false)
    .then(function() {
      if (!finished) {
        assert.notDeepEqual(act, exp);
        assert.deepEqual(act.sort(function (x, y) { return parseFloat(x) - parseFloat(y); }), exp);
        finished = true;
        done();
      }
    });

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 15000);
});

QUnit.test('u.async.all [sequential]', function(assert) {
  var done = assert.async();
  assert.ok(u.async.all);

  var finished = false;
  var n = 100;

  var exp = u.array.range(n);
  var act = [];
  var jobs = exp.map(function(i) { return function() {
    return new Promise(function(resolve, reject) {
      setTimeout(function () {
        act.push(i);
        resolve();
      }, RAND[i]);
    });
  }; });

  u.async.all(jobs, true)
    .then(function() {
      if (!finished) {
        assert.deepEqual(act, exp);
        finished = true;
        done();
      }
    });

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 15000);
});

QUnit.test('u.async.all [parallel]', function(assert) {
  var done = assert.async();
  assert.ok(u.async.all);

  var finished = false;
  var n = 100;

  var exp = u.array.range(n);
  var act = [];
  var jobs = exp.map(function(i) { return function() {
    return new Promise(function(resolve, reject) {
      setTimeout(function () {
        act.push(i);
        resolve();
      }, RAND[i]);
    });
  }; });

  u.async.all(jobs, false)
    .then(function() {
      if (!finished) {
        assert.notDeepEqual(act, exp);
        assert.deepEqual(act.sort(function (x, y) { return parseFloat(x) - parseFloat(y); }), exp);
        finished = true;
        done();
      }
    });

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 15000);
});

QUnit.test('u.async.do', function(assert) {
  var done = assert.async();
  assert.ok(u.async.do);

  var finished = false;
  var n = 100;
  var exp = u.array.range(n);
  var act = [];

  u.async.do(function(i) {
    return new Promise(function(resolve, reject) {
      setTimeout(function () {
        act.push(i);
        resolve(i + 1 < n);
      }, RAND[i]);
    });
  }).then(function() {
      if (!finished) {
        assert.deepEqual(act, exp);
        finished = true;
        done();
      }
    });

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 15000);
});

QUnit.test('u.async.Deferred', function(assert) {
  var done = assert.async();
  assert.ok(u.async.Deferred);

  var finished = false;

  var d = new u.async.Deferred();
  var act = null;
  var exp = 'something';
  d.then(function(value) {
    if (!finished) {
      act = value;
      assert.equal(act, exp);
      finished = true;
      done();
    }
  });
  setTimeout(function() {
    d.resolve('something');
  }, 100);

  setTimeout(function() {
    assert.notOk(finished);
    assert.notOk(act);
  }, 50);

  setTimeout(function() {
    assert.ok(finished, 'Timed out');
    if (!finished) { done(); finished = true; }
  }, 200);
});


QUnit.test('u.log', function(assert) {
  assert.ok(u.log.info);
  assert.ok(u.log.warn);
  assert.ok(u.log.error);

  var infoCalls = 0;
  var warnCalls = 0;
  var errCalls = 0;
  u.log.LOGGER = {
    info: function() {
      ++infoCalls;
      return console.info.apply(console, arguments);
    },
    warn: function() {
      ++warnCalls;
      return console.warn.apply(console, arguments);
    },
    error: function() {
      ++errCalls;
      return console.error.apply(console, arguments);
    }
  };

  u.log.info('info [no verbose]');
  u.log.warn('warn [no verbose]');
  u.log.error('error [no verbose]');
  assert.notOk(infoCalls);
  assert.notOk(warnCalls);
  assert.notOk(errCalls);

  u.log.VERBOSE = 'error';
  u.log.info('info [verbose=error]');
  u.log.warn('warn [verbose=error]');
  u.log.error('error [verbose=error]');
  assert.notOk(infoCalls);
  assert.notOk(warnCalls);
  assert.equal(errCalls, 1);

  u.log.VERBOSE = 'warn';
  u.log.info('info [verbose=warn]');
  u.log.warn('warn [verbose=warn]');
  u.log.error('error [verbose=warn]');
  assert.notOk(infoCalls);
  assert.equal(warnCalls, 1);
  assert.equal(errCalls, 2);

  u.log.VERBOSE = 'info';
  u.log.info('info [verbose=info]');
  u.log.warn('warn [verbose=info]');
  u.log.error('error [verbose=info]');
  assert.equal(infoCalls, 1);
  assert.equal(warnCalls, 2);
  assert.equal(errCalls, 3);
});

QUnit.test('u.fast.map', function(assert) {
  assert.ok(u.fast.map);
  var inc = function(d) { return d+1; };
  assert.deepEqual(u.fast.map([1,2,3], inc), [1,2,3].map(inc));
});

QUnit.test('u.fast.concat', function(assert) {
  assert.ok(u.fast.concat);

  var x = [[1,2,3],[4,5,6],[7,8]];

  assert.deepEqual(u.fast.concat(x), x.reduce(function(a1, a2) { return a1.concat(a2); }));
});

QUnit.test('u.fast.filter', function(assert) {
  assert.ok(u.fast.filter);

  var x = [1,2,3,4,5,6,7,8,9];

  assert.deepEqual(u.fast.filter(x, function(it) { return it % 3 == 0; }), [3,6,9]);
});

QUnit.test('u.fast.forEach', function(assert) {
  assert.ok(u.fast.forEach);

  var x = [1,2,3,4,5,6,7,8,9];

  var sum = 0;
  u.fast.forEach(x, function(el) { sum += el; });
  assert.equal(sum, x.reduce(function(el1, el2) { return el1 + el2; }));
});
